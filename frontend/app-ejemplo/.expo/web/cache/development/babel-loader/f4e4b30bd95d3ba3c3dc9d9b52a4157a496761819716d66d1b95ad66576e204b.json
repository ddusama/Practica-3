{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { OpenAIApi, Configuration } from 'openai';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar configuration = new Configuration({\n  apiKey: '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'\n});\nvar openai = new OpenAIApi(configuration);\nvar ChatGPT = function ChatGPT() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    prompt = _useState2[0],\n    setPrompt = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    result = _useState4[0],\n    setResult = _useState4[1];\n  var getResultFromOpenApi = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var completion = yield openai.createCompletion({\n          model: 'text-davinci-003',\n          prompt: prompt,\n          temperature: 0.1,\n          max_tokens: 150\n        });\n        console.log(completion);\n        setResult(completion.data.choices[0].text);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    return function getResultFromOpenApi() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Hola soy un chat\"\n    }), _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      style: styles.body,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            padding: 10\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontWeight: 'bold',\n              color: item.type === 'user' ? 'blue' : 'black'\n            },\n            children: item.type === 'user' ? 'Tu: ' : 'Bot: '\n          }), _jsx(Text, {\n            style: styles.bot,\n            children: item.text\n          })]\n        });\n      }\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: textInput,\n      onChangeText: function onChangeText(text) {\n        return setTextInput(text);\n      },\n      placeholder: \"Pregunta r\\xE1pido\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleSend,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Enviar Pregunta\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n    margin: 10\n  },\n  text: {\n    fontSize: 14,\n    fontWeight: 'bold'\n  }\n});\nexport default ChatGPT;","map":{"version":3,"names":["React","useState","TextInput","View","StyleSheet","Text","Button","OpenAIApi","Configuration","jsx","_jsx","jsxs","_jsxs","configuration","apiKey","openai","ChatGPT","_useState","_useState2","_slicedToArray","prompt","setPrompt","_useState3","_useState4","result","setResult","getResultFromOpenApi","_ref","_asyncToGenerator","completion","createCompletion","model","temperature","max_tokens","console","log","data","choices","text","error","apply","arguments","style","styles","container","children","title","FlatList","keyExtractor","item","index","toString","body","renderItem","_ref2","flexDirection","padding","fontWeight","color","type","bot","input","value","textInput","onChangeText","setTextInput","placeholder","TouchableOpacity","button","onPress","handleSend","buttonText","create","flex","alignItems","justifyContent","backgroundColor","borderWidth","borderRadius","margin","fontSize"],"sources":["C:/Users/Dani/ProgramacionMovil/Practica 3/frontend/app-ejemplo/src/components/chatgpt/ChatGPT.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {TextInput, View, StyleSheet, Text, Button} from \"react-native\";\r\nimport {OpenAIApi, Configuration} from 'openai'\r\n\r\nconst configuration = new Configuration({\r\n    apiKey: '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'\r\n})\r\n\r\nconst openai = new OpenAIApi(configuration)\r\n\r\nconst ChatGPT = () => {\r\n    const [prompt, setPrompt] = useState('')\r\n    const [result, setResult] = useState('')\r\n\r\n    const getResultFromOpenApi = async () => {\r\n        try {\r\n            const completion = await openai.createCompletion({\r\n                model: 'text-davinci-003',\r\n                prompt:prompt,\r\n                temperature: 0.1,\r\n                max_tokens:150\r\n            })\r\n            console.log(completion)\r\n            setResult(completion.data.choices[0].text)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n          <Text style={styles.title}>Hola soy un chat</Text>\r\n          <FlatList\r\n            data={data}\r\n            keyExtractor={(item, index) => index.toString()}\r\n            style={styles.body}\r\n            renderItem={({ item }) => (\r\n              <View style={{ flexDirection: 'row', padding: 10 }}>\r\n                <Text style={{ fontWeight: 'bold', color: item.type === 'user' ? 'blue' : 'black' }}>\r\n                  {item.type === 'user' ? 'Tu: ' : 'Bot: '}\r\n                </Text>\r\n                <Text style={styles.bot}>{item.text}</Text>\r\n              </View>\r\n            )}\r\n          />\r\n          <TextInput\r\n            style={styles.input}\r\n            value={textInput}\r\n            onChangeText={(text) => setTextInput(text)}\r\n            placeholder=\"Pregunta rÃ¡pido\"\r\n          />\r\n          <TouchableOpacity style={styles.button} onPress={handleSend}>\r\n            <Text style={styles.buttonText}>Enviar Pregunta</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      );\r\n    \r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    input: {\r\n        backgroundColor: 'white',\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        margin: 10\r\n    },\r\n    text: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold'\r\n    }\r\n})\r\n\r\nexport default ChatGPT"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}