{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { OpenAIApi, Configuration } from 'openai';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar configuration = new Configuration({\n  apiKey: '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'\n});\nvar openai = new OpenAIApi(configuration);\nvar ChatGPT = function ChatGPT() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    prompt = _useState4[0],\n    setPrompt = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    result = _useState6[0],\n    setResult = _useState6[1];\n  var message = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var completion = yield openai.createCompletion({\n          model: 'text-davinci-003',\n          prompt: prompt,\n          temperature: 0.1,\n          max_tokens: 150\n        });\n        console.log(completion);\n        setResult(completion.data.choices[0].text);\n        setData([].concat(_toConsumableArray(data), [{\n          type: 'user',\n          text: prompt\n        }, {\n          type: 'bot',\n          text: completion\n        }]));\n        setPrompt('');\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    return function message() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.text,\n      children: 'Ingrese Pregunta'\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: prompt,\n      onChangeText: setPrompt\n    }), _jsx(Button, {\n      title: 'Generate Result',\n      onPress: message\n    }), _jsx(Text, {\n      style: styles.text,\n      children: result\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: 'center'\n  },\n  input: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n    margin: 10\n  },\n  text: {\n    fontSize: 14,\n    fontWeight: 'bold'\n  }\n});\nexport default ChatGPT;","map":{"version":3,"names":["React","useState","TextInput","View","StyleSheet","Text","Button","OpenAIApi","Configuration","jsx","_jsx","jsxs","_jsxs","configuration","apiKey","openai","ChatGPT","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","prompt","setPrompt","_useState5","_useState6","result","setResult","message","_ref","_asyncToGenerator","completion","createCompletion","model","temperature","max_tokens","console","log","choices","text","concat","_toConsumableArray","type","error","apply","arguments","style","styles","container","children","input","value","onChangeText","title","onPress","create","flex","alignItems","justifyContent","backgroundColor","borderWidth","borderRadius","padding","margin","fontSize","fontWeight"],"sources":["C:/Users/Dani/ProgramacionMovil/Practica 3/frontend/app-ejemplo/src/components/chatgpt/ChatGPT.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {TextInput, View, StyleSheet, Text, Button} from \"react-native\";\r\nimport {OpenAIApi, Configuration} from 'openai'\r\n\r\nconst configuration = new Configuration({\r\n    apiKey: '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'\r\n})\r\n\r\nconst openai = new OpenAIApi(configuration)\r\n\r\nconst ChatGPT = () => {\r\n    const [data, setData] = useState([]);\r\n    const [prompt, setPrompt] = useState('')\r\n    const [result, setResult] = useState('')\r\n\r\n    const message = async () => {\r\n        try {\r\n            const completion = await openai.createCompletion({\r\n                model: 'text-davinci-003',\r\n                prompt:prompt,\r\n                temperature: 0.1,\r\n                max_tokens:150\r\n            },\r\n            )\r\n            console.log(completion)\r\n            setResult(completion.data.choices[0].text);\r\n            setData([...data, { type: 'user', text: prompt }, { type: 'bot', text: completion }]);\r\n            setPrompt('');\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Text style={styles.text}>\r\n                {'Ingrese Pregunta'}\r\n            </Text>\r\n            <TextInput style={styles.input} value={prompt} onChangeText={setPrompt}/>\r\n            <Button title={'Generate Result'} onPress={message}/>\r\n            <Text style={styles.text}>\r\n                {result}\r\n            </Text>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    input: {\r\n        backgroundColor: 'white',\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        margin: 10\r\n    },\r\n    text: {\r\n        fontSize: 14,\r\n        fontWeight: 'bold'\r\n    }\r\n})\r\n\r\nexport default ChatGPT"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}