{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as ExpoDocumentPicker from \"expo-document-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatPDF = function ChatPDF() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    pdfDoc = _useState2[0],\n    setPdfDoc = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    question = _useState4[0],\n    setQuestion = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    result = _useState6[0],\n    setResult = _useState6[1];\n  var handleFilePicker = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var result = yield ExpoDocumentPicker.getDocumentAsync({\n        copyToCacheDirectory: true\n      });\n      setPdfDoc(result.file);\n    });\n    return function handleFilePicker() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleUpload = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var data = new FormData();\n        data.append('question', question);\n        data.append('file', pdfDoc);\n        console.log(data.get('file'));\n        var response = yield fetch('http://localhost:19006/archivos', {\n          method: 'POST',\n          body: data\n        });\n        if (response.ok) {\n          setQuestion('');\n          var responseJSON = yield response.json();\n          setResult(responseJSON.text);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    return function handleUpload() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Button, {\n      title: 'Select PDF',\n      onPress: handleFilePicker\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: question,\n      onChangeText: setQuestion,\n      placeholder: 'Ingresa tu pregunta'\n    }), _jsx(Button, {\n      title: 'send',\n      onPress: handleUpload\n    }), _jsx(Text, {\n      children: result\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  input: {\n    backgroundColor: 'white',\n    borderWidth: 1,\n    borderRadius: 10,\n    padding: 10,\n    margin: 10\n  }\n});\nexport default ChatPDF;","map":{"version":3,"names":["React","useState","Text","View","StyleSheet","Button","TextInput","ExpoDocumentPicker","jsx","_jsx","jsxs","_jsxs","ChatPDF","_useState","_useState2","_slicedToArray","pdfDoc","setPdfDoc","_useState3","_useState4","question","setQuestion","_useState5","_useState6","result","setResult","handleFilePicker","_ref","_asyncToGenerator","getDocumentAsync","copyToCacheDirectory","file","apply","arguments","handleUpload","_ref2","data","FormData","append","console","log","get","response","fetch","method","body","ok","responseJSON","json","text","error","children","title","onPress","style","styles","input","value","onChangeText","placeholder","create","backgroundColor","borderWidth","borderRadius","padding","margin"],"sources":["C:/Users/Dani/ProgramacionMovil/Practica 3/frontend/app-ejemplo/src/components/chatpdf/ChatPDF.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {Text, View, StyleSheet, Button, TextInput} from \"react-native\";\r\nimport * as ExpoDocumentPicker from \"expo-document-picker\";\r\n\r\nconst ChatPDF = () => {\r\n    const [pdfDoc, setPdfDoc] = useState()\r\n    const [question, setQuestion] = useState('')\r\n    const [result, setResult] = useState('')\r\n    const handleFilePicker = async () => {\r\n        let result = await ExpoDocumentPicker.getDocumentAsync({copyToCacheDirectory: true});\r\n        setPdfDoc(result.file)\r\n    }\r\n    const handleUpload = async () => {\r\n        try {\r\n            const data = new FormData()\r\n            data.append('question', question)\r\n            data.append('file', pdfDoc)\r\n            console.log(data.get('file'))\r\n            const response = await fetch('http://localhost:19006/archivos', {\r\n                method: 'POST',\r\n                body: data\r\n            })\r\n            if (response.ok) {\r\n                setQuestion('')\r\n                const responseJSON = await response.json()\r\n                setResult(responseJSON.text)\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <Button title={'Select PDF'} onPress={handleFilePicker}/>\r\n            <TextInput style={styles.input} value={question} onChangeText={setQuestion}\r\n                       placeholder={'Ingresa tu pregunta'}/>\r\n            <Button title={'send'} onPress={handleUpload}/>\r\n            <Text>{result}</Text>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        backgroundColor: 'white',\r\n        borderWidth: 1,\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        margin: 10\r\n    }\r\n})\r\nexport default ChatPDF"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}