{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Configuration, OpenAIApi } from 'openai';\nvar ChatGPT = function ChatGPT() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    messages = _useState4[0],\n    setMessages = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputMessage = _useState6[0],\n    setInputMessage = _useState6[1];\n  var apiKey = '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';\n  var configuration = new Configuration({\n    apiKey: apiKey\n  });\n  var openai = new OpenAIApi(configuration);\n  var sendMessage = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var _response$data, _response$data$choice, _response$data$choice2;\n        var response = yield openai.createCompletion({\n          model: \"text-davinci-003\",\n          prompt: \"\" + inputMessage,\n          temperature: 0.1,\n          max_tokens: 150,\n          n: 1\n        });\n        var respuesta = response == null ? void 0 : (_response$data = response.data) == null ? void 0 : (_response$data$choice = _response$data.choices[0]) == null ? void 0 : (_response$data$choice2 = _response$data$choice.text) == null ? void 0 : _response$data$choice2.trim();\n        setMessages([].concat(_toConsumableArray(messages), [{\n          content: respuesta,\n          sender: 'bot'\n        }]));\n        setInputMessage('');\n      } catch (error) {}\n    });\n    return function sendMessage() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport default ChatGPT;","map":{"version":3,"names":["React","useState","useEffect","View","TextInput","Button","Text","FlatList","StyleSheet","Configuration","OpenAIApi","ChatGPT","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","messages","setMessages","_useState5","_useState6","inputMessage","setInputMessage","apiKey","configuration","openai","sendMessage","_ref","_asyncToGenerator","_response$data","_response$data$choice","_response$data$choice2","response","createCompletion","model","prompt","temperature","max_tokens","n","respuesta","choices","text","trim","concat","_toConsumableArray","content","sender","error","apply","arguments"],"sources":["C:/Users/Dani/ProgramacionMovil/Practica 3/frontend/app-ejemplo/src/Navigation.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, TextInput, Button, Text, FlatList, StyleSheet } from 'react-native';\nimport { Configuration, OpenAIApi } from 'openai'\n\n\nconst ChatGPT= () => {\n  const [data, setData] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const apiKey = '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'\n  const configuration = new Configuration({\n    apiKey\n  })\n\n  const openai = new OpenAIApi(configuration);\n\n\n  const sendMessage = async () => {\n    try {\n      const response = await openai.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: `${inputMessage}`,\n        temperature: 0.1,\n        max_tokens: 150,\n        n: 1,\n      })\n      const respuesta = response?.data?.choices[0]?.text?.trim();\n      setMessages([...messages, { content: respuesta, sender: 'bot' }]);\n\n      setInputMessage('');\n    } catch (error) {\n      \n    }\n    \n  }\n};\nexport default ChatGPT;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAEnD,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AAGjD,IAAMC,OAAO,GAAE,SAATA,OAAOA,CAAA,EAAQ;EACnB,IAAAC,SAAA,GAAwBX,QAAQ,CAAC,EAAE,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,UAAA,GAAgChB,QAAQ,CAAC,EAAE,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAwCpB,QAAQ,CAAC,EAAE,CAAC;IAAAqB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA7CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EACpC,IAAMG,MAAM,GAAG,qDAAqD;EACpE,IAAMC,aAAa,GAAG,IAAIjB,aAAa,CAAC;IACtCgB,MAAM,EAANA;EACF,CAAC,CAAC;EAEF,IAAME,MAAM,GAAG,IAAIjB,SAAS,CAACgB,aAAa,CAAC;EAG3C,IAAME,WAAW;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MAC9B,IAAI;QAAA,IAAAC,cAAA,EAAAC,qBAAA,EAAAC,sBAAA;QACF,IAAMC,QAAQ,SAASP,MAAM,CAACQ,gBAAgB,CAAC;UAC7CC,KAAK,EAAE,kBAAkB;UACzBC,MAAM,OAAKd,YAAc;UACzBe,WAAW,EAAE,GAAG;UAChBC,UAAU,EAAE,GAAG;UACfC,CAAC,EAAE;QACL,CAAC,CAAC;QACF,IAAMC,SAAS,GAAGP,QAAQ,qBAAAH,cAAA,GAARG,QAAQ,CAAEnB,IAAI,sBAAAiB,qBAAA,GAAdD,cAAA,CAAgBW,OAAO,CAAC,CAAC,CAAC,sBAAAT,sBAAA,GAA1BD,qBAAA,CAA4BW,IAAI,qBAAhCV,sBAAA,CAAkCW,IAAI,CAAC,CAAC;QAC1DxB,WAAW,IAAAyB,MAAA,CAAAC,kBAAA,CAAK3B,QAAQ,IAAE;UAAE4B,OAAO,EAAEN,SAAS;UAAEO,MAAM,EAAE;QAAM,CAAC,EAAC,CAAC;QAEjExB,eAAe,CAAC,EAAE,CAAC;MACrB,CAAC,CAAC,OAAOyB,KAAK,EAAE,CAEhB;IAEF,CAAC;IAAA,gBAjBKrB,WAAWA,CAAA;MAAA,OAAAC,IAAA,CAAAqB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAiBhB;AACH,CAAC;AACD,eAAexC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}