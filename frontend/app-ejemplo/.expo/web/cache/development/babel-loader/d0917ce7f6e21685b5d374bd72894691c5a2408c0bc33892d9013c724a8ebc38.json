{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { OpenAIApi, Configuration } from 'openai';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar configuration = new Configuration({\n  apiKey: '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'\n});\nvar openai = new OpenAIApi(configuration);\nvar ChatGPT = function ChatGPT() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    prompt = _useState4[0],\n    setPrompt = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    result = _useState6[0],\n    setResult = _useState6[1];\n  var message = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var completion = yield openai.createCompletion({\n          model: 'text-davinci-003',\n          prompt: prompt,\n          temperature: 0.1,\n          max_tokens: 150\n        });\n        console.log(completion);\n        setResult(completion.data.choices[0].text);\n        setData([].concat(_toConsumableArray(data), [{\n          type: 'user',\n          text: prompt\n        }, {\n          type: 'bot',\n          text: result\n        }]));\n      } catch (error) {\n        console.log(error);\n      }\n    });\n    return function message() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Hola soy un chat\"\n    }), _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item, index) {\n        return index.toString();\n      },\n      style: styles.body,\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            padding: 10\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontWeight: 'bold',\n              color: item.type === 'user' ? 'blue' : 'black'\n            },\n            children: item.type === 'user' ? 'Tu: ' : 'Bot: '\n          }), _jsx(Text, {\n            style: styles.bot,\n            children: item.text\n          })]\n        });\n      }\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: prompt,\n      onChangeText: function onChangeText(text) {\n        return setPrompt(text);\n      },\n      placeholder: \"Pregunta r\\xE1pido\"\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: message,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Enviar Pregunta\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  body: {\n    flex: 1,\n    width: '100%'\n  },\n  input: {\n    width: '100%',\n    height: 40,\n    borderWidth: 1,\n    borderColor: 'gray',\n    marginBottom: 10,\n    paddingHorizontal: 10\n  },\n  button: {\n    backgroundColor: 'blue',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  bot: {\n    flex: 1\n  }\n});\nexport default ChatGPT;","map":{"version":3,"names":["React","useState","TextInput","View","StyleSheet","Text","FlatList","TouchableOpacity","OpenAIApi","Configuration","jsx","_jsx","jsxs","_jsxs","configuration","apiKey","openai","ChatGPT","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","prompt","setPrompt","_useState5","_useState6","result","setResult","message","_ref","_asyncToGenerator","completion","createCompletion","model","temperature","max_tokens","console","log","choices","text","concat","_toConsumableArray","type","error","apply","arguments","style","styles","container","children","title","keyExtractor","item","index","toString","body","renderItem","_ref2","flexDirection","padding","fontWeight","color","bot","input","value","onChangeText","placeholder","button","onPress","buttonText","create","flex","alignItems","justifyContent","fontSize","marginBottom","width","height","borderWidth","borderColor","paddingHorizontal","backgroundColor","paddingVertical","borderRadius"],"sources":["C:/Users/Dani/ProgramacionMovil/Practica 3/frontend/app-ejemplo/src/components/chatgpt/ChatGPT.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {TextInput, View, StyleSheet, Text, FlatList, TouchableOpacity} from \"react-native\";\r\nimport {OpenAIApi, Configuration} from 'openai'\r\n\r\nconst configuration = new Configuration({\r\n    apiKey: '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'\r\n})\r\n\r\nconst openai = new OpenAIApi(configuration)\r\n\r\nconst ChatGPT = () => {\r\n    const [data, setData] = useState([]);\r\n    const [prompt, setPrompt] = useState('')\r\n    const [result, setResult] = useState('')\r\n\r\n    const message = async () => {\r\n        try {\r\n            const completion = await openai.createCompletion({\r\n                model: 'text-davinci-003',\r\n                prompt:prompt,\r\n                temperature: 0.1,\r\n                max_tokens:150\r\n            },\r\n            )\r\n            console.log(completion)\r\n            setResult(completion.data.choices[0].text);\r\n            setData([...data, { type: 'user', text: prompt }, { type: 'bot', text: result }]);\r\n            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n          <Text style={styles.title}>Hola soy un chat</Text>\r\n          <FlatList\r\n            data={data}\r\n            keyExtractor={(item, index) => index.toString()}\r\n            style={styles.body}\r\n            renderItem={({ item }) => (\r\n              <View style={{ flexDirection: 'row', padding: 10 }}>\r\n                <Text style={{ fontWeight: 'bold', color: item.type === 'user' ? 'blue' : 'black' }}>\r\n                  {item.type === 'user' ? 'Tu: ' : 'Bot: '}\r\n                </Text>\r\n                <Text style={styles.bot}>{item.text}</Text>\r\n              </View>\r\n            )}\r\n          />\r\n          <TextInput\r\n            style={styles.input}\r\n            value={prompt}\r\n            onChangeText={(text) => setPrompt(text)}\r\n            placeholder=\"Pregunta rÃ¡pido\"\r\n          />\r\n          <TouchableOpacity style={styles.button} onPress={message}>\r\n            <Text style={styles.buttonText}>Enviar Pregunta</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      );\r\n\r\n   \r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        padding: 20,\r\n      },\r\n      title: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        marginBottom: 20,\r\n      },\r\n      body: {\r\n        flex: 1,\r\n        width: '100%',\r\n      },\r\n      input: {\r\n        width: '100%',\r\n        height: 40,\r\n        borderWidth: 1,\r\n        borderColor: 'gray',\r\n        marginBottom: 10,\r\n        paddingHorizontal: 10,\r\n      },\r\n      button: {\r\n        backgroundColor: 'blue',\r\n        paddingVertical: 10,\r\n        paddingHorizontal: 20,\r\n        borderRadius: 5,\r\n      },\r\n      buttonText: {\r\n        color: 'white',\r\n        fontWeight: 'bold',\r\n      },\r\n      bot: {\r\n        flex: 1,\r\n      }\r\n})\r\n\r\nexport default ChatGPT"],"mappings":";;;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAC,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,gBAAA;AAEtC,SAAQC,SAAS,EAAEC,aAAa,QAAO,QAAQ;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE/C,IAAMC,aAAa,GAAG,IAAIL,aAAa,CAAC;EACpCM,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,IAAMC,MAAM,GAAG,IAAIR,SAAS,CAACM,aAAa,CAAC;AAE3C,IAAMG,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;EAClB,IAAAC,SAAA,GAAwBjB,QAAQ,CAAC,EAAE,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7BG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,UAAA,GAA4BtB,QAAQ,CAAC,EAAE,CAAC;IAAAuB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAA4B1B,QAAQ,CAAC,EAAE,CAAC;IAAA2B,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EAExB,IAAMG,OAAO;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;MACxB,IAAI;QACA,IAAMC,UAAU,SAASlB,MAAM,CAACmB,gBAAgB,CAAC;UAC7CC,KAAK,EAAE,kBAAkB;UACzBX,MAAM,EAACA,MAAM;UACbY,WAAW,EAAE,GAAG;UAChBC,UAAU,EAAC;QACf,CACA,CAAC;QACDC,OAAO,CAACC,GAAG,CAACN,UAAU,CAAC;QACvBJ,SAAS,CAACI,UAAU,CAACb,IAAI,CAACoB,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC;QAC1CpB,OAAO,IAAAqB,MAAA,CAAAC,kBAAA,CAAKvB,IAAI,IAAE;UAAEwB,IAAI,EAAE,MAAM;UAAEH,IAAI,EAAEjB;QAAO,CAAC,EAAE;UAAEoB,IAAI,EAAE,KAAK;UAAEH,IAAI,EAAEb;QAAO,CAAC,EAAC,CAAC;MAErF,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACZP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;MACtB;IACJ,CAAC;IAAA,gBAhBKf,OAAOA,CAAA;MAAA,OAAAC,IAAA,CAAAe,KAAA,OAAAC,SAAA;IAAA;EAAA,GAgBZ;EAED,OACInC,KAAA,CAACV,IAAI;IAAC8C,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BzC,IAAA,CAACN,IAAI;MAAC4C,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,EAAC;IAAgB,CAAM,CAAC,EAClDzC,IAAA,CAACL,QAAQ;MACPe,IAAI,EAAEA,IAAK;MACXiC,YAAY,EAAE,SAAAA,aAACC,IAAI,EAAEC,KAAK;QAAA,OAAKA,KAAK,CAACC,QAAQ,CAAC,CAAC;MAAA,CAAC;MAChDR,KAAK,EAAEC,MAAM,CAACQ,IAAK;MACnBC,UAAU,EAAE,SAAAA,WAAAC,KAAA;QAAA,IAAGL,IAAI,GAAAK,KAAA,CAAJL,IAAI;QAAA,OACjB1C,KAAA,CAACV,IAAI;UAAC8C,KAAK,EAAE;YAAEY,aAAa,EAAE,KAAK;YAAEC,OAAO,EAAE;UAAG,CAAE;UAAAV,QAAA,GACjDzC,IAAA,CAACN,IAAI;YAAC4C,KAAK,EAAE;cAAEc,UAAU,EAAE,MAAM;cAAEC,KAAK,EAAET,IAAI,CAACV,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG;YAAQ,CAAE;YAAAO,QAAA,EACjFG,IAAI,CAACV,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG;UAAO,CACpC,CAAC,EACPlC,IAAA,CAACN,IAAI;YAAC4C,KAAK,EAAEC,MAAM,CAACe,GAAI;YAAAb,QAAA,EAAEG,IAAI,CAACb;UAAI,CAAO,CAAC;QAAA,CACvC,CAAC;MAAA;IACP,CACH,CAAC,EACF/B,IAAA,CAACT,SAAS;MACR+C,KAAK,EAAEC,MAAM,CAACgB,KAAM;MACpBC,KAAK,EAAE1C,MAAO;MACd2C,YAAY,EAAE,SAAAA,aAAC1B,IAAI;QAAA,OAAKhB,SAAS,CAACgB,IAAI,CAAC;MAAA,CAAC;MACxC2B,WAAW,EAAC;IAAiB,CAC9B,CAAC,EACF1D,IAAA,CAACJ,gBAAgB;MAAC0C,KAAK,EAAEC,MAAM,CAACoB,MAAO;MAACC,OAAO,EAAExC,OAAQ;MAAAqB,QAAA,EACvDzC,IAAA,CAACN,IAAI;QAAC4C,KAAK,EAAEC,MAAM,CAACsB,UAAW;QAAApB,QAAA,EAAC;MAAe,CAAM;IAAC,CACtC,CAAC;EAAA,CACf,CAAC;AAIf,CAAC;AACD,IAAMF,MAAM,GAAG9C,UAAU,CAACqE,MAAM,CAAC;EAC7BtB,SAAS,EAAE;IACPuB,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBd,OAAO,EAAE;EACX,CAAC;EACDT,KAAK,EAAE;IACLwB,QAAQ,EAAE,EAAE;IACZd,UAAU,EAAE,MAAM;IAClBe,YAAY,EAAE;EAChB,CAAC;EACDpB,IAAI,EAAE;IACJgB,IAAI,EAAE,CAAC;IACPK,KAAK,EAAE;EACT,CAAC;EACDb,KAAK,EAAE;IACLa,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBJ,YAAY,EAAE,EAAE;IAChBK,iBAAiB,EAAE;EACrB,CAAC;EACDb,MAAM,EAAE;IACNc,eAAe,EAAE,MAAM;IACvBC,eAAe,EAAE,EAAE;IACnBF,iBAAiB,EAAE,EAAE;IACrBG,YAAY,EAAE;EAChB,CAAC;EACDd,UAAU,EAAE;IACVR,KAAK,EAAE,OAAO;IACdD,UAAU,EAAE;EACd,CAAC;EACDE,GAAG,EAAE;IACHS,IAAI,EAAE;EACR;AACN,CAAC,CAAC;AAEF,eAAezD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}